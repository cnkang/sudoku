name: Node.js CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:  # Allows manual trigger

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        check-latest: true
        cache: 'yarn'

    - name: Enable Corepack
      run: corepack enable  # Enable Corepack to manage Yarn versions

    - name: Set Yarn to version 2
      run: yarn set version berry  # Set Yarn to v2 (Berry)
    
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

    - name: cache builds
      uses: actions/cache@v4
      id: yarn-cache
      with:
        path: |
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          ${{ github.workspace }}/.next/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-
  
    - name: Install dependencies
      run: yarn install --immutable

    - name: Build project
      run: yarn build

    - name: Run tests
      run: yarn test
