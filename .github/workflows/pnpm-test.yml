name: CI/CD

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job: [quality, build, unit-tests, coverage, security]

    steps:
      - uses: actions/checkout@v5

      - name: Setup pnpm
        if: matrix.job != 'security'
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
        with:
          version: 10.19.0

      - uses: actions/setup-node@v6
        if: matrix.job != 'security'
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        if: matrix.job != 'security'
        run: pnpm install --frozen-lockfile

      - name: Quality checks
        if: matrix.job == 'quality'
        run: pnpm quality

      - name: Build
        if: matrix.job == 'build'
        run: pnpm build

      - name: Unit tests
        if: matrix.job == 'unit-tests'
        run: pnpm test
        timeout-minutes: 10

      - name: Coverage tests
        if: matrix.job == 'coverage'
        run: pnpm test:coverage
        timeout-minutes: 15

      - name: Upload Coverage to Codecov
        if: matrix.job == 'coverage'
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: Security scan (njsscan)
        if: matrix.job == 'security'
        id: njsscan
        uses: ajinabraham/njsscan-action@231750a435d85095d33be7d192d52ec650625146 # v9
        with:
          args: '. --sarif --output results.sarif || true'

      - name: Upload security scan results
        if: matrix.job == 'security'
        uses: github/codeql-action/upload-sarif@16140ae1a102900babc80a33c44059580f687047 # v3
        with:
          sarif_file: results.sarif

  # Playwright E2EÊµãËØï - Áã¨Á´ãjobÈÅøÂÖçÁâàÊú¨ÂÜ≤Á™Å
  e2e-tests:
    runs-on: ubuntu-latest
    needs: ci
    if: success()

    steps:
      - uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
        with:
          version: 10.19.0

      - uses: actions/setup-node@v6
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml', 'package.json') }}
          restore-keys: playwright-${{ runner.os }}-

      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: ./scripts/install-playwright.sh

      - name: Build application
        run: pnpm build

      - name: Start application and run tests
        run: |
          # ÂêØÂä®Â∫îÁî®
          echo "Starting Next.js application..."
          pnpm start &
          APP_PID=$!

          # Á≠âÂæÖÂ∫îÁî®Â∞±Áª™
          echo "Waiting for application to be ready..."
          RETRY_COUNT=0
          MAX_RETRIES=60

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f -s http://localhost:3000/api/health >/dev/null 2>&1; then
              echo "‚úÖ Health check passed!"
              break
            fi
            
            if [ $RETRY_COUNT -eq 0 ]; then
              echo "‚è≥ Waiting for application startup..."
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            sleep 2
            
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "‚ùå Application failed to start within timeout"
              echo "Checking application logs..."
              ps aux | grep node || true
              curl -v http://localhost:3000/api/health || true
              kill $APP_PID || true
              exit 1
            fi
          done

          # È™åËØÅÂ∫îÁî®ÂìçÂ∫îÂíå‰∏ªÈ°µ
          echo "üîç Verifying application response..."
          curl -f http://localhost:3000/api/health

          # Additional wait for homepage to be fully ready
          echo "üîç Verifying homepage accessibility..."
          RETRY_COUNT=0
          MAX_RETRIES=30

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f -s http://localhost:3000/ >/dev/null 2>&1; then
              echo "‚úÖ Homepage is accessible!"
              break
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            sleep 1
            
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "‚ö†Ô∏è Homepage check failed, but continuing with tests..."
              break
            fi
          done

          # Give the app a bit more time to fully initialize
          echo "‚è≥ Final initialization wait..."
          sleep 5

          # ËøêË°åE2EÊµãËØï
          echo "üß™ Running E2E tests..."

          # Set environment variables for more resilient testing
          export CI=true
          export BASE_URL=http://localhost:3000

          # Run tests with retry on failure
          pnpm test:e2e || {
            echo "‚ö†Ô∏è First test run failed, waiting and retrying..."
            sleep 10
            pnpm test:e2e
          }
          TEST_EXIT=$?

          # Ê∏ÖÁêÜ
          echo "üßπ Cleaning up..."
          kill $APP_PID || true
          exit $TEST_EXIT
        env:
          BASE_URL: http://localhost:3000

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
